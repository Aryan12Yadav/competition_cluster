# Generated by Django 5.0.6 on 2025-10-07 07:50

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExamCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(editable=False, max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Exam Categories',
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(max_length=100)),
                ('feedback_text', models.TextField()),
                ('is_featured', models.BooleanField(default=False)),
                ('user_avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
            ],
        ),
        migrations.CreateModel(
            name='MockTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('is_free', models.BooleanField(default=True)),
                ('is_new', models.BooleanField(default=False)),
                ('is_popular', models.BooleanField(default=False)),
                ('attempts_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question_count', models.IntegerField()),
                ('max_marks', models.IntegerField()),
                ('time_minutes', models.IntegerField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='exams.examcategory')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Question Text')),
                ('difficulty', models.CharField(choices=[('E', 'Easy'), ('M', 'Medium'), ('H', 'Hard')], default='M', max_length=1)),
                ('marks', models.DecimalField(decimal_places=2, default=1.0, max_digits=4)),
                ('negative_marks', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('solution', models.TextField(blank=True, null=True)),
                ('correct_option', models.ForeignKey(blank=True, help_text='Set the correct option after saving all options.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='correct_for_question', to='exams.option')),
                ('mock_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='exams.mocktest')),
                ('subject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='exams.subject')),
            ],
        ),
        migrations.AddField(
            model_name='option',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='exams.question'),
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('max_marks', models.DecimalField(decimal_places=2, max_digits=5)),
                ('correct_answers', models.IntegerField()),
                ('incorrect_answers', models.IntegerField()),
                ('unattempted', models.IntegerField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(auto_now_add=True)),
                ('time_taken_seconds', models.PositiveIntegerField(default=0)),
                ('mock_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exams.mocktest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_correct', models.BooleanField(default=False)),
                ('time_spent', models.PositiveIntegerField(default=0, help_text='Time spent on the question in seconds')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exams.question')),
                ('selected_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='exams.option')),
                ('test_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='exams.testresult')),
            ],
        ),
    ]
